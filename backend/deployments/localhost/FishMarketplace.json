{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fisheriesManagementAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "FishBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerKg",
          "type": "uint256"
        }
      ],
      "name": "FishListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPricePerKg",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPricePerKg",
          "type": "uint256"
        }
      ],
      "name": "adjustListingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "buyFish",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "getListingDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerKg",
          "type": "uint256"
        }
      ],
      "name": "listFish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "fisher",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerKg",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSoldOut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextListingId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricingAdjustmentContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pricingAdjustmentContract",
          "type": "address"
        }
      ],
      "name": "setPricingAdjustmentContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc22c84874ca2b63bed50dfa3a833042402f8f3ca81416ec22db85917f39890ba",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "569711",
    "logsBloom": "0x
    "blockHash": "0x510fd3ba787334af511ee821ea98650758e54b314795c80587e0afd005af82bb",
    "transactionHash": "0xc22c84874ca2b63bed50dfa3a833042402f8f3ca81416ec22db85917f39890ba",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "569711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f70af04d44ccd1bf5c27b56c66c49af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fisheriesManagementAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"FishBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerKg\",\"type\":\"uint256\"}],\"name\":\"FishListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPricePerKg\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPricePerKg\",\"type\":\"uint256\"}],\"name\":\"adjustListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"buyFish\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"getListingDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerKg\",\"type\":\"uint256\"}],\"name\":\"listFish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fisher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerKg\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSoldOut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextListingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricingAdjustmentContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricingAdjustmentContract\",\"type\":\"address\"}],\"name\":\"setPricingAdjustmentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FishMarketplace.sol\":\"FishMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FishMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport {FisheriesManagement} from \\\"./FisheriesManagement.sol\\\";\\n\\ncontract FishMarketplace {\\n    FisheriesManagement fisheriesManagement;\\n    address public pricingAdjustmentContract;\\n\\n    struct Listing {\\n        uint256 listingId;\\n        uint256 batchId;\\n        address fisher;\\n        uint256 totalWeight;\\n        uint256 availableWeight;\\n        uint256 pricePerKg;\\n        bool isSoldOut;\\n    }\\n\\n    mapping(uint256 => Listing) public listings;\\n    uint256 public nextListingId = 1;\\n\\n    event FishListed(\\n        uint256 listingId,\\n        uint256 batchId,\\n        uint256 weight,\\n        uint256 pricePerKg\\n    );\\n    event FishBought(\\n        uint256 listingId,\\n        address buyer,\\n        uint256 weight,\\n        uint256 totalPrice\\n    );\\n    event PriceUpdated(uint256 listingId, uint256 newPricePerKg);\\n\\n    constructor(address fisheriesManagementAddress) {\\n        fisheriesManagement = FisheriesManagement(fisheriesManagementAddress);\\n    }\\n\\n    // modifier onlyPricingAdjustment() {\\n    //     require(msg.sender == pricingAdjustmentContract, \\\"Unauthorized: Only the PricingAdjustment contract can adjust prices\\\");\\n    //     _;\\n    // }\\n\\n    function setPricingAdjustmentContract(\\n        address _pricingAdjustmentContract\\n    ) external {\\n        require(\\n            pricingAdjustmentContract == address(0),\\n            \\\"Pricing adjustment contract already set\\\"\\n        );\\n        pricingAdjustmentContract = _pricingAdjustmentContract;\\n    }\\n\\n    function listFish(\\n        uint256 batchId,\\n        uint256 weight,\\n        uint256 pricePerKg\\n    ) public {\\n        require(\\n            fisheriesManagement.getBatchSustainability(batchId),\\n            \\\"Batch is not sustainable\\\"\\n        );\\n        fisheriesManagement.updateweight(batchId, weight);\\n        listings[nextListingId] = Listing(\\n            nextListingId,\\n            batchId,\\n            msg.sender,\\n            weight,\\n            weight,\\n            pricePerKg,\\n            false\\n        );\\n        emit FishListed(nextListingId, batchId, weight, pricePerKg);\\n        nextListingId++;\\n    }\\n\\n    function buyFish(uint256 listingId, uint256 weight) public payable {\\n        Listing storage listing = listings[listingId];\\n        require(!listing.isSoldOut, \\\"Listing is sold out\\\");\\n        require(\\n            weight <= listing.availableWeight,\\n            \\\"Not enough weight available\\\"\\n        );\\n\\n        uint256 totalPrice = weight * listing.pricePerKg;\\n        require(msg.value >= totalPrice, \\\"Insufficient funds\\\");\\n\\n        listing.availableWeight -= weight;\\n        if (listing.availableWeight == 0) {\\n            listing.isSoldOut = true;\\n        }\\n        payable(listing.fisher).transfer(totalPrice);\\n        emit FishBought(listingId, msg.sender, weight, totalPrice);\\n    }\\n\\n    // New function to allow only authorized contract to adjust prices\\n    function adjustListingPrice(\\n        uint256 listingId,\\n        uint256 newPricePerKg\\n    ) external {\\n        Listing storage listing = listings[listingId];\\n        listing.pricePerKg = newPricePerKg;\\n        emit PriceUpdated(listingId, newPricePerKg);\\n    }\\n\\n    // New getter function to access listing details\\n    function getListingDetails(\\n        uint256 listingId\\n    )\\n        external\\n        view\\n        returns (uint256, uint256, address, uint256, uint256, uint256, bool)\\n    {\\n        Listing storage listing = listings[listingId];\\n        return (\\n            listing.listingId,\\n            listing.batchId,\\n            listing.fisher,\\n            listing.totalWeight,\\n            listing.availableWeight,\\n            listing.pricePerKg,\\n            listing.isSoldOut\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x63401c8f9f84819fd6ab6af96047034a0184461bf81ae578a335094d07f634cf\",\"license\":\"MIT\"},\"contracts/FisheriesManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\ncontract FisheriesManagement {\\n    address public government;\\n    uint256 public nextBatchId = 1;\\n\\n    struct FishBatch {\\n        uint256 id;\\n        address fisher;\\n        uint256 weight;\\n        uint256 pricePerKg;\\n        bool isSold;\\n        bool inDispute;\\n        bool sustainable;\\n        uint256[] transferIds;\\n    }\\n\\n    mapping(uint256 => FishBatch) public batches;\\n\\n    event FishLogged(\\n        uint256 batchId,\\n        address fisher,\\n        uint256 weight,\\n        uint256 pricePerKg\\n    );\\n    event SustainabilityUpdated(uint256 batchId, bool sustainable);\\n    event DisputeRaised(uint256 batchId, string reason);\\n\\n    modifier onlyGovernment() {\\n        require(\\n            msg.sender == government,\\n            \\\"Only government can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        government = msg.sender;\\n    }\\n\\n    function logCatch(uint256 weight, uint256 pricePerKg) public {\\n        batches[nextBatchId] = FishBatch(\\n            nextBatchId,\\n            msg.sender,\\n            weight,\\n            pricePerKg,\\n            false,\\n            false,\\n            false,\\n            new uint256[](0)\\n        );\\n        emit FishLogged(nextBatchId, msg.sender, weight, pricePerKg);\\n        nextBatchId++;\\n    }\\n\\n    function updateSustainability(\\n        uint256 batchId,\\n        bool sustainable\\n    ) public onlyGovernment {\\n        batches[batchId].sustainable = sustainable;\\n        emit SustainabilityUpdated(batchId, sustainable);\\n    }\\n\\n    function raiseDispute(\\n        uint256 batchId,\\n        string memory reason\\n    ) public onlyGovernment {\\n        batches[batchId].inDispute = true;\\n        emit DisputeRaised(batchId, reason);\\n    }\\n\\n\\n\\n\\nfunction getFishBatch(uint256 batchId)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        address,\\n        uint256,\\n        uint256,\\n        bool,\\n        bool,\\n        bool,\\n        uint256[] memory\\n    )\\n{\\n    require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n    FishBatch memory batch = batches[batchId];\\n    return (\\n        batch.id,\\n        batch.fisher,\\n        batch.weight,\\n        batch.pricePerKg,\\n        batch.isSold,\\n        batch.inDispute,\\n        batch.sustainable,\\n        batch.transferIds\\n    );\\n}\\n\\n\\n\\n    function getBatchSustainability(\\n        uint256 batchId\\n    ) external view returns (bool) {\\n        return batches[batchId].sustainable;\\n    }\\n\\n    function getTransferIds(\\n        uint256 batchId\\n    ) external view returns (uint256[] memory) {\\n        require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n        return batches[batchId].transferIds;\\n    }\\n\\n    function addTransferToBatch(uint256 batchId, uint256 transferId) external {\\n        require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n        batches[batchId].transferIds.push(transferId);\\n    }\\n\\n    function updateweight(uint256 batchId, uint256 weight) external {\\n        require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n        batches[batchId].weight -= weight;\\n    }\\n}\\n\",\"keccak256\":\"0x501c532e526efbc07dc26ae127309be10639d0ab2d317bb702856373965dc586\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600355348015601457600080fd5b506040516109123803806109128339810160408190526031916055565b600080546001600160a01b0319166001600160a01b03929092169190911790556083565b600060208284031215606657600080fd5b81516001600160a01b0381168114607c57600080fd5b9392505050565b610880806100926000396000f3fe60806040526004361061007b5760003560e01c8063c2a410341161004e578063c2a4103414610116578063d2195b0614610136578063de74e57b14610156578063fb05da2e1461020057600080fd5b80632dd63f07146100805780633eb4e38a146100a25780635e1ae743146100df578063aaccf1ec146100f2575b600080fd5b34801561008c57600080fd5b506100a061009b366004610732565b610266565b005b3480156100ae57600080fd5b506001546100c2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100ed366004610762565b6102f6565b3480156100fe57600080fd5b5061010860035481565b6040519081526020016100d6565b34801561012257600080fd5b506100a0610131366004610762565b6104bb565b34801561014257600080fd5b506100a0610151366004610784565b610510565b34801561016257600080fd5b506101bb6101713660046107b0565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395946001600160a01b03909316939192909160ff1687565b6040805197885260208801969096526001600160a01b03909416948601949094526060850191909152608084015260a0830191909152151560c082015260e0016100d6565b34801561020c57600080fd5b506101bb61021b3660046107b0565b6000908152600260208190526040909120805460018201549282015460038301546004840154600585015460069095015493966001600160a01b03909316949193909260ff90911690565b6001546001600160a01b0316156102d45760405162461bcd60e51b815260206004820152602760248201527f50726963696e672061646a7573746d656e7420636f6e747261637420616c726560448201526618591e481cd95d60ca1b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600260205260409020600681015460ff161561034f5760405162461bcd60e51b8152602060048201526013602482015272131a5cdd1a5b99c81a5cc81cdbdb19081bdd5d606a1b60448201526064016102cb565b80600401548211156103a35760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f7567682077656967687420617661696c61626c65000000000060448201526064016102cb565b60008160050154836103b591906107df565b9050803410156103fc5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016102cb565b8282600401600082825461041091906107fc565b909155505060048201546000036104315760068201805460ff191660011790555b60028201546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561046d573d6000803e3d6000fd5b5060408051858152336020820152908101849052606081018290527f12b9d6f1e9f7c81270e0365f623addb1d4e51d6884d5031eb7a631bbd0e0033a9060800160405180910390a150505050565b600082815260026020908152604091829020600581018490558251858152918201849052917f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd696838910160405180910390a1505050565b60005460405163a43daf5760e01b8152600481018590526001600160a01b039091169063a43daf5790602401602060405180830381865afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d919061080f565b6105c95760405162461bcd60e51b815260206004820152601860248201527f4261746368206973206e6f74207375737461696e61626c65000000000000000060448201526064016102cb565b600054604051639b49388160e01b815260048101859052602481018490526001600160a01b0390911690639b49388190604401600060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b50506040805160e0810182526003805480835260208084018a81523385870190815260608087018c815260808089018e815260a08a018e8152600060c08c018181529981526002808a52908d90209b518c55965160018c01559451958a0180546001600160a01b0319166001600160a01b0390971696909617909555905188880155925160048801559051600587015592516006909501805460ff191695151595909517909455915484519081529182018990529281018790529182018590527f8af6198b2407fc459257acb7dfb8a3a037bc661507d804a99bee424dbe111106935001905060405180910390a16003805490600061072883610831565b9190505550505050565b60006020828403121561074457600080fd5b81356001600160a01b038116811461075b57600080fd5b9392505050565b6000806040838503121561077557600080fd5b50508035926020909101359150565b60008060006060848603121561079957600080fd5b505081359360208301359350604090920135919050565b6000602082840312156107c257600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107f6576107f66107c9565b92915050565b818103818111156107f6576107f66107c9565b60006020828403121561082157600080fd5b8151801515811461075b57600080fd5b600060018201610843576108436107c9565b506001019056fea264697066735822122096dfebe042ecfaec04145e6d12740fc14f1ccfc256fb012ba2a30a1c618630f364736f6c634300081b0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063c2a410341161004e578063c2a4103414610116578063d2195b0614610136578063de74e57b14610156578063fb05da2e1461020057600080fd5b80632dd63f07146100805780633eb4e38a146100a25780635e1ae743146100df578063aaccf1ec146100f2575b600080fd5b34801561008c57600080fd5b506100a061009b366004610732565b610266565b005b3480156100ae57600080fd5b506001546100c2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100ed366004610762565b6102f6565b3480156100fe57600080fd5b5061010860035481565b6040519081526020016100d6565b34801561012257600080fd5b506100a0610131366004610762565b6104bb565b34801561014257600080fd5b506100a0610151366004610784565b610510565b34801561016257600080fd5b506101bb6101713660046107b0565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395946001600160a01b03909316939192909160ff1687565b6040805197885260208801969096526001600160a01b03909416948601949094526060850191909152608084015260a0830191909152151560c082015260e0016100d6565b34801561020c57600080fd5b506101bb61021b3660046107b0565b6000908152600260208190526040909120805460018201549282015460038301546004840154600585015460069095015493966001600160a01b03909316949193909260ff90911690565b6001546001600160a01b0316156102d45760405162461bcd60e51b815260206004820152602760248201527f50726963696e672061646a7573746d656e7420636f6e747261637420616c726560448201526618591e481cd95d60ca1b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600260205260409020600681015460ff161561034f5760405162461bcd60e51b8152602060048201526013602482015272131a5cdd1a5b99c81a5cc81cdbdb19081bdd5d606a1b60448201526064016102cb565b80600401548211156103a35760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f7567682077656967687420617661696c61626c65000000000060448201526064016102cb565b60008160050154836103b591906107df565b9050803410156103fc5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016102cb565b8282600401600082825461041091906107fc565b909155505060048201546000036104315760068201805460ff191660011790555b60028201546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561046d573d6000803e3d6000fd5b5060408051858152336020820152908101849052606081018290527f12b9d6f1e9f7c81270e0365f623addb1d4e51d6884d5031eb7a631bbd0e0033a9060800160405180910390a150505050565b600082815260026020908152604091829020600581018490558251858152918201849052917f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd696838910160405180910390a1505050565b60005460405163a43daf5760e01b8152600481018590526001600160a01b039091169063a43daf5790602401602060405180830381865afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d919061080f565b6105c95760405162461bcd60e51b815260206004820152601860248201527f4261746368206973206e6f74207375737461696e61626c65000000000000000060448201526064016102cb565b600054604051639b49388160e01b815260048101859052602481018490526001600160a01b0390911690639b49388190604401600060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b50506040805160e0810182526003805480835260208084018a81523385870190815260608087018c815260808089018e815260a08a018e8152600060c08c018181529981526002808a52908d90209b518c55965160018c01559451958a0180546001600160a01b0319166001600160a01b0390971696909617909555905188880155925160048801559051600587015592516006909501805460ff191695151595909517909455915484519081529182018990529281018790529182018590527f8af6198b2407fc459257acb7dfb8a3a037bc661507d804a99bee424dbe111106935001905060405180910390a16003805490600061072883610831565b9190505550505050565b60006020828403121561074457600080fd5b81356001600160a01b038116811461075b57600080fd5b9392505050565b6000806040838503121561077557600080fd5b50508035926020909101359150565b60008060006060848603121561079957600080fd5b505081359360208301359350604090920135919050565b6000602082840312156107c257600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107f6576107f66107c9565b92915050565b818103818111156107f6576107f66107c9565b60006020828403121561082157600080fd5b8151801515811461075b57600080fd5b600060018201610843576108436107c9565b506001019056fea264697066735822122096dfebe042ecfaec04145e6d12740fc14f1ccfc256fb012ba2a30a1c618630f364736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/FishMarketplace.sol:FishMarketplace",
        "label": "fisheriesManagement",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FisheriesManagement)677"
      },
      {
        "astId": 8,
        "contract": "contracts/FishMarketplace.sol:FishMarketplace",
        "label": "pricingAdjustmentContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 28,
        "contract": "contracts/FishMarketplace.sol:FishMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Listing)23_storage)"
      },
      {
        "astId": 31,
        "contract": "contracts/FishMarketplace.sol:FishMarketplace",
        "label": "nextListingId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FisheriesManagement)677": {
        "encoding": "inplace",
        "label": "contract FisheriesManagement",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Listing)23_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FishMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)23_storage"
      },
      "t_struct(Listing)23_storage": {
        "encoding": "inplace",
        "label": "struct FishMarketplace.Listing",
        "members": [
          {
            "astId": 10,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "batchId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "fisher",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "totalWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "availableWeight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "pricePerKg",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "contracts/FishMarketplace.sol:FishMarketplace",
            "label": "isSoldOut",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}