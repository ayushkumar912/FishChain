{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fisheriesManagementAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransferRecorded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fisheriesManagement",
      "outputs": [
        {
          "internalType": "contract FisheriesManagement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        }
      ],
      "name": "recordTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transferId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc341bbb6b913c5cc3bb6b0fa88c11d9cf8970f30ca37c9bd97f939cbc49ae200",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "409945",
    "logsBloom": "0x
    "blockHash": "0xbd1d0683573594384a8d2d347efe5d4ae9a1498a1558e3ac386be7992f3234e7",
    "transactionHash": "0xc341bbb6b913c5cc3bb6b0fa88c11d9cf8970f30ca37c9bd97f939cbc49ae200",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "409945",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f70af04d44ccd1bf5c27b56c66c49af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fisheriesManagementAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferRecorded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fisheriesManagement\",\"outputs\":[{\"internalType\":\"contract FisheriesManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"}],\"name\":\"recordTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FishTransfer.sol\":\"FishTransfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FishTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport {FisheriesManagement} from \\\"./FisheriesManagement.sol\\\";\\n\\ncontract FishTransfer {\\n    FisheriesManagement public fisheriesManagement;\\n    struct Transfer {\\n        uint256 transferId;\\n        uint256 batchId;\\n        string stage; // e.g., \\\"Storage\\\", \\\"Transport\\\"\\n        uint256 timestamp;\\n    }\\n\\n    mapping(uint256 => Transfer) public transfers;\\n    uint256 public nextTransferId = 1;\\n\\n    constructor(address fisheriesManagementAddress) {\\n        fisheriesManagement = FisheriesManagement(fisheriesManagementAddress);\\n    }\\n\\n    event TransferRecorded(\\n        uint256 transferId,\\n        uint256 batchId,\\n        string stage,\\n        uint256 timestamp\\n    );\\n\\n    function recordTransfer(uint256 batchId, string memory stage) public {\\n        // require(fisheriesManagement.batches(batchId).id == batchId, \\\"Batch does not exist\\\");\\n\\n        transfers[nextTransferId] = Transfer(\\n            nextTransferId,\\n            batchId,\\n            stage,\\n            block.timestamp\\n        );\\n        fisheriesManagement.addTransferToBatch(batchId, nextTransferId);\\n        emit TransferRecorded(nextTransferId, batchId, stage, block.timestamp);\\n        nextTransferId++;\\n    }\\n}\\n\",\"keccak256\":\"0x254d87a4ffcf0e6e067217a5fa5e2bc66187c4d538f52330d721dbe6f7ba234a\",\"license\":\"MIT\"},\"contracts/FisheriesManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\ncontract FisheriesManagement {\\n    address public government;\\n    uint256 public nextBatchId = 1;\\n\\n    struct FishBatch {\\n        uint256 id;\\n        address fisher;\\n        uint256 weight;\\n        uint256 pricePerKg;\\n        bool isSold;\\n        bool inDispute;\\n        bool sustainable;\\n        uint256[] transferIds;\\n    }\\n\\n    mapping(uint256 => FishBatch) public batches;\\n\\n    event FishLogged(\\n        uint256 batchId,\\n        address fisher,\\n        uint256 weight,\\n        uint256 pricePerKg\\n    );\\n    event SustainabilityUpdated(uint256 batchId, bool sustainable);\\n    event DisputeRaised(uint256 batchId, string reason);\\n\\n    modifier onlyGovernment() {\\n        require(\\n            msg.sender == government,\\n            \\\"Only government can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        government = msg.sender;\\n    }\\n\\n    function logCatch(uint256 weight, uint256 pricePerKg) public {\\n        batches[nextBatchId] = FishBatch(\\n            nextBatchId,\\n            msg.sender,\\n            weight,\\n            pricePerKg,\\n            false,\\n            false,\\n            false,\\n            new uint256[](0)\\n        );\\n        emit FishLogged(nextBatchId, msg.sender, weight, pricePerKg);\\n        nextBatchId++;\\n    }\\n\\n    function updateSustainability(\\n        uint256 batchId,\\n        bool sustainable\\n    ) public onlyGovernment {\\n        batches[batchId].sustainable = sustainable;\\n        emit SustainabilityUpdated(batchId, sustainable);\\n    }\\n\\n    function raiseDispute(\\n        uint256 batchId,\\n        string memory reason\\n    ) public onlyGovernment {\\n        batches[batchId].inDispute = true;\\n        emit DisputeRaised(batchId, reason);\\n    }\\n\\n\\n\\n\\nfunction getFishBatch(uint256 batchId)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        address,\\n        uint256,\\n        uint256,\\n        bool,\\n        bool,\\n        bool,\\n        uint256[] memory\\n    )\\n{\\n    require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n    FishBatch memory batch = batches[batchId];\\n    return (\\n        batch.id,\\n        batch.fisher,\\n        batch.weight,\\n        batch.pricePerKg,\\n        batch.isSold,\\n        batch.inDispute,\\n        batch.sustainable,\\n        batch.transferIds\\n    );\\n}\\n\\n\\n\\n    function getBatchSustainability(\\n        uint256 batchId\\n    ) external view returns (bool) {\\n        return batches[batchId].sustainable;\\n    }\\n\\n    function getTransferIds(\\n        uint256 batchId\\n    ) external view returns (uint256[] memory) {\\n        require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n        return batches[batchId].transferIds;\\n    }\\n\\n    function addTransferToBatch(uint256 batchId, uint256 transferId) external {\\n        require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n        batches[batchId].transferIds.push(transferId);\\n    }\\n\\n    function updateweight(uint256 batchId, uint256 weight) external {\\n        require(batches[batchId].id == batchId, \\\"Batch does not exist\\\");\\n        batches[batchId].weight -= weight;\\n    }\\n}\\n\",\"keccak256\":\"0x501c532e526efbc07dc26ae127309be10639d0ab2d317bb702856373965dc586\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600255348015601457600080fd5b5060405161062e38038061062e8339810160408190526031916055565b600080546001600160a01b0319166001600160a01b03929092169190911790556083565b600060208284031215606657600080fd5b81516001600160a01b0381168114607c57600080fd5b9392505050565b61059c806100926000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806382bab28a146100515780639377d71114610081578063b85b381b146100a4578063ddbb17d3146100bb575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f3660046102a2565b6100d0565b60405161007894939291906102bb565b6100ad60025481565b604051908152602001610078565b6100ce6100c9366004610334565b610182565b005b60016020819052600091825260409091208054918101546002820180549192916100f9906103f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610125906103f7565b80156101725780601f1061014757610100808354040283529160200191610172565b820191906000526020600020905b81548152906001019060200180831161015557829003601f168201915b5050505050908060030154905084565b60408051608081018252600280548083526020808401878152848601878152426060870152600093845260019283905295909220845181559151908201559251919291908201906101d39082610480565b506060919091015160039091015560005460025460405163228679a360e01b81526004810185905260248101919091526001600160a01b039091169063228679a390604401600060405180830381600087803b15801561023257600080fd5b505af1158015610246573d6000803e3d6000fd5b505050507fba239e83bd5d7b36d4817073b9f28ddebd5cf01f83ff05612ae2d5f50ed5b6b960025483834260405161028194939291906102bb565b60405180910390a1600280549060006102998361053f565b91905055505050565b6000602082840312156102b457600080fd5b5035919050565b848152836020820152608060408201526000835180608084015260005b818110156102f557602081870181015160a08684010152016102d8565b50600060a0828501015260a0601f19601f83011684010191505082606083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561034757600080fd5b82359150602083013567ffffffffffffffff81111561036557600080fd5b8301601f8101851361037657600080fd5b803567ffffffffffffffff8111156103905761039061031e565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156103bf576103bf61031e565b6040528181528282016020018710156103d757600080fd5b816020840160208301376000602083830101528093505050509250929050565b600181811c9082168061040b57607f821691505b60208210810361042b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561047b57806000526020600020601f840160051c810160208510156104585750805b601f840160051c820191505b818110156104785760008155600101610464565b50505b505050565b815167ffffffffffffffff81111561049a5761049a61031e565b6104ae816104a884546103f7565b84610431565b6020601f8211600181146104e257600083156104ca5750848201515b600019600385901b1c1916600184901b178455610478565b600084815260208120601f198516915b8281101561051257878501518255602094850194600190920191016104f2565b50848210156105305786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60006001820161055f57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e5c2781deeccc0e4dd06b179e03f2ee2ea359b726b048f79aefbde4a1393713c64736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806382bab28a146100515780639377d71114610081578063b85b381b146100a4578063ddbb17d3146100bb575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f3660046102a2565b6100d0565b60405161007894939291906102bb565b6100ad60025481565b604051908152602001610078565b6100ce6100c9366004610334565b610182565b005b60016020819052600091825260409091208054918101546002820180549192916100f9906103f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610125906103f7565b80156101725780601f1061014757610100808354040283529160200191610172565b820191906000526020600020905b81548152906001019060200180831161015557829003601f168201915b5050505050908060030154905084565b60408051608081018252600280548083526020808401878152848601878152426060870152600093845260019283905295909220845181559151908201559251919291908201906101d39082610480565b506060919091015160039091015560005460025460405163228679a360e01b81526004810185905260248101919091526001600160a01b039091169063228679a390604401600060405180830381600087803b15801561023257600080fd5b505af1158015610246573d6000803e3d6000fd5b505050507fba239e83bd5d7b36d4817073b9f28ddebd5cf01f83ff05612ae2d5f50ed5b6b960025483834260405161028194939291906102bb565b60405180910390a1600280549060006102998361053f565b91905055505050565b6000602082840312156102b457600080fd5b5035919050565b848152836020820152608060408201526000835180608084015260005b818110156102f557602081870181015160a08684010152016102d8565b50600060a0828501015260a0601f19601f83011684010191505082606083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561034757600080fd5b82359150602083013567ffffffffffffffff81111561036557600080fd5b8301601f8101851361037657600080fd5b803567ffffffffffffffff8111156103905761039061031e565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156103bf576103bf61031e565b6040528181528282016020018710156103d757600080fd5b816020840160208301376000602083830101528093505050509250929050565b600181811c9082168061040b57607f821691505b60208210810361042b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561047b57806000526020600020601f840160051c810160208510156104585750805b601f840160051c820191505b818110156104785760008155600101610464565b50505b505050565b815167ffffffffffffffff81111561049a5761049a61031e565b6104ae816104a884546103f7565b84610431565b6020601f8211600181146104e257600083156104ca5750848201515b600019600385901b1c1916600184901b178455610478565b600084815260208120601f198516915b8281101561051257878501518255602094850194600190920191016104f2565b50848210156105305786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60006001820161055f57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e5c2781deeccc0e4dd06b179e03f2ee2ea359b726b048f79aefbde4a1393713c64736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 296,
        "contract": "contracts/FishTransfer.sol:FishTransfer",
        "label": "fisheriesManagement",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FisheriesManagement)677"
      },
      {
        "astId": 310,
        "contract": "contracts/FishTransfer.sol:FishTransfer",
        "label": "transfers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Transfer)305_storage)"
      },
      {
        "astId": 313,
        "contract": "contracts/FishTransfer.sol:FishTransfer",
        "label": "nextTransferId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(FisheriesManagement)677": {
        "encoding": "inplace",
        "label": "contract FisheriesManagement",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Transfer)305_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FishTransfer.Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(Transfer)305_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Transfer)305_storage": {
        "encoding": "inplace",
        "label": "struct FishTransfer.Transfer",
        "members": [
          {
            "astId": 298,
            "contract": "contracts/FishTransfer.sol:FishTransfer",
            "label": "transferId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 300,
            "contract": "contracts/FishTransfer.sol:FishTransfer",
            "label": "batchId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 302,
            "contract": "contracts/FishTransfer.sol:FishTransfer",
            "label": "stage",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 304,
            "contract": "contracts/FishTransfer.sol:FishTransfer",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}